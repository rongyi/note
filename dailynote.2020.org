* https://news.ycombinator.com/item?id=21958359
  torrent golang实现,里面有dht的讨论
* about book: https://news.ycombinator.com/item?id=21955258
Online content is often low-quality, highly commercial in nature and very ephemeral. Books, the real kind, when they are good can stay with you for a very long time.

A well-written story, be it fiction or non-fiction can have a long lastig impact and even an emotional connection that I have personally never experienced with anything 'online'.

If you don't read books, you are missing out. Even only 1 or 2 books a year is a world of difference, even if those books aren't the best ones out there. This (as posted before) also has to do with the time investment and realtime one-to-one (you and the book) time.

If you are having a hard time getting started, or keep reading a book to the finish, start with something light and perhaps... generic. Like a Dan Brown book. (and I know opinions vary wildly) Even a smaller book that might be more targeted as a children's book such as Neil Gaiman's 'Ocean at the end of the lane' are perfectly fine to get something going. Not everything will engage you, but making it easier for yourself to get started and enjoy some reading time is all it takes to enrich yourself. (which is perhaps not the best wording... but I'm no writer)
* 想偷懒的时候看看: screw it, let's do this
  https://news.ycombinator.com/item?id=22105229
* 数学书籍相关
https://www.neilwithdata.com/mathematics-self-learner
书籍推荐： http://www.cargalmathbooks.com/
* rust学习
+ https://rust-unofficial.github.io/too-many-lists/index.html
+ https://news.ycombinator.com/item?id=22390662
+ https://fasterthanli.me/blog/2020/a-half-hour-to-learn-rust/ https://news.ycombinator.com/item?id=22448933
+ https://www.geekabyte.io/2020/02/rust-ownership-rules.html
+ https://doc.rust-lang.org/rust-by-example/hello.html
* interpreter开发
https://news.ycombinator.com/item?id=22788738
http://journal.stuffwithstuff.com/2020/04/05/crafting-crafting-interpreters/
http://craftinginterpreters.com/
* lisp algorithm
  https://leanpub.com/progalgs/read
* 关于orgmode https://news.ycombinator.com/item?id=23299993
What some are missing is the fact that low barriers to entry sometimes turn into barriers to growth at a later stage.
* 效率 https://jeffhuang.com/productivity_text_file/
  https://untools.co/
* 编译器集合： https://github.com/melling/ComputerLanguages/blob/master/compilers.md
* orgmode达人： http://stormrider.io/ninety-pct.html
* programmer advice:
+ Add value. Train yourself to only do things that add value. Value is loosely defined. It can be going the extra mile smashing that bug that everybody is complaining about. It can be whipping up a mind blowing demo to pull in that big customer. Nobody cares if you work 80 hours a week, but it's not adding any value. Get in the habit of working on things that bring value to others.
+ More communicating, less coding. This is extremely important in teams and large organisations. Communicate to make sure nobody does double work. Communicate to have your ideas and opinions heard. Communicate to avoid doing pointless work. The list goes on. Communicate with your peers, your boss, your customers.
+ Have healthy habits. Eat well, sleep well, exercise. When you're young you can pull off all nighters and eating pizza's all week. As you get older, you cannot.
+ Be reliable. When you say you're going to do something, do it. Write reliable, well-tested code that works.
+ Fail. Make mistakes. And learn from them. Don't be afraid to take on a challenge. You cannot expect to be great without having made mistakes. You'll make them once and hopefully never again.
+ Follow up. When people send you e-mails and messages. Answer as fast as you can. Things move a whole lot more quickly when people don't wait on each other.
+ Be on time. Nobody likes people who are late.
+ Always learn. Try new things. If you don't like them, then at least you tried and learned something new. Keep exploring and reading.
+ Take a look at filesizes. The biggest files usually contain the meat of the program, or at least a dispatcher that points to the meat of the program. main.cc is usually tiny and useless for finding your way around.
+ Keep your mind clean, always finish what you started, so you can have completion and not clutter your thought process. This means not leaving code in a state of disarray, should compile when returned back to
+ becoming a 0.1× programmer: achieving same or better results with 1/10th the lines of code and effort. More here: https://codewithoutrules.com/2016/08/25/the-01x-programmer/
+ Refactoring is like the Fight Club. Never talk about Refactoring. Instead do it all the time while implementing new features instead of saving it up until the building falls apart.
+ Always be learning. Be it a medium articles, fiction or non-fictions, etc, it doesn't matter. As long as I am constantly learning new stuff, it's fine. It also help keep my ego in check since there are so much unknown I've yet to learn.
+ to stop whenever I'm feeling tired

-- https://news.ycombinator.com/item?id=14708350
